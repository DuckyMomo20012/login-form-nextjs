/*----------------------------------------------------------
MASV: 19127631
HO TEN CAC THANH VIEN NHOM:
+ DUONG TIEN VINH - 19127631
+ TRAN PHAN THANH HAI - 19127005
+ NGUYEN LE HUU SANG - 19127538
LAB: 03 - NHOM
NGAY: 20/04/2022
NOTE: Set database compability level to 120 for RSA_512
----------------------------------------------------------*/

USE [QLSVNhom]
GO

/* Remember @MK as varchar!!!. Nvarchar and varchar return different results */
CREATE PROCEDURE SP_INS_PUBLIC_NHANVIEN(@MANV AS VARCHAR(20)
									   ,@HOTEN AS NVARCHAR(100)
									   ,@EMAIL AS VARCHAR(20) = NULL
									   ,@LUONGCB AS INT
									   ,@TENDN AS NVARCHAR(100)
									   ,@MK AS VARCHAR(MAX))
AS
BEGIN
	DECLARE @MATKHAU_HASH VARBINARY(20)
	DECLARE @LUONG_ENCRYPT VARBINARY(MAX)
	DECLARE @ASYMKEY VARCHAR(20)
	DECLARE @QUERY VARCHAR(MAX)

	SET @ASYMKEY = @MANV

    SET @MATKHAU_HASH = HASHBYTES('SHA1', @MK)

	/* Set database compability level to 120 */

	SET @QUERY = 'IF NOT EXISTS (SELECT * ' +
							   'FROM sys.asymmetric_keys 
							    WHERE name=' + QUOTENAME(@ASYMKEY, '''') + ')'
			  + ' '
			  + 'CREATE ASYMMETRIC KEY ' + @ASYMKEY
			  + ' '
			  + 'WITH ALGORITHM = RSA_512'
			  + ' '
			  + 'ENCRYPTION BY PASSWORD=' + QUOTENAME(@MK, '''')

	EXEC (@QUERY)

	SET @LUONG_ENCRYPT = ENCRYPTBYASYMKEY(ASYMKEY_ID(@ASYMKEY), CONVERT(VARCHAR(MAX), @LUONGCB));

	INSERT NHANVIEN (MANV, HOTEN, EMAIL, LUONG, TENDN, MATKHAU, PUBKEY) VALUES (@MANV, @HOTEN, @EMAIL, @LUONG_ENCRYPT, @TENDN, @MATKHAU_HASH, @ASYMKEY);
END
GO

CREATE PROCEDURE SP_SEL_PUBLIC_NHANVIEN(@MANV AS VARCHAR(20)
									   ,@MK AS NVARCHAR(MAX))
AS
BEGIN
	SELECT MANV, HOTEN, EMAIL, CONVERT(VARCHAR(MAX), DECRYPTBYASYMKEY(ASYMKEY_ID(PUBKEY), LUONG, @MK)) AS LUONGCB
	FROM NHANVIEN
	WHERE NHANVIEN.MANV = @MANV
END
GO

--EXEC SP_SEL_PUBLIC_NHANVIEN 'NV01', '1234'
--GO

CREATE PROCEDURE SP_INS_SINHVIEN(@MASV AS NVARCHAR(20)
								,@HOTEN AS NVARCHAR(100)
								,@NGAYSINH AS DATETIME = NULL
								,@DIACHI AS NVARCHAR(200) = NULL
								,@MALOP AS VARCHAR(20) = NULL
								,@TENDN AS NVARCHAR(100)
								,@MATKHAU AS VARCHAR(MAX))
AS
BEGIN
	DECLARE @MATKHAU_HASH VARBINARY(16)

    SET @MATKHAU_HASH = HASHBYTES('MD5', @MATKHAU)

	INSERT SINHVIEN (MASV, HOTEN, NGAYSINH, DIACHI, MALOP, TENDN, MATKHAU) VALUES (@MASV, @HOTEN, @NGAYSINH, @DIACHI, @MALOP, @TENDN, @MATKHAU_HASH);
END
GO

CREATE PROCEDURE SP_INS_BANGDIEM(@MASV AS VARCHAR(20)
								,@MAHP AS VARCHAR(20)
								,@DIEMTHI AS SMALLINT
								,@MANV AS VARCHAR(20))
AS
BEGIN
	DECLARE @DIEM_ENCRYPT VARBINARY(MAX)
	DECLARE @ASYMKEY VARCHAR(20)

	SET @ASYMKEY = (
		SELECT NV.PUBKEY
		FROM NHANVIEN AS NV
			JOIN LOP AS LP
			ON LP.MANV = NV.MANV
			JOIN HOCPHAN AS HP
			ON HP.MALOP = LP.MALOP
		WHERE NV.MANV = @MANV AND HP.MAHP = @MAHP
	);

	IF @ASYMKEY IS NOT NULL
	BEGIN
		SET @DIEM_ENCRYPT = ENCRYPTBYASYMKEY(ASYMKEY_ID(@ASYMKEY), CONVERT(VARCHAR(MAX), @DIEMTHI));
		INSERT BANGDIEM (MASV, MAHP, DIEMTHI) VALUES (@MASV, @MAHP, @DIEM_ENCRYPT);
	END
	ELSE
	BEGIN;
		THROW 50005, 'You don''t have permissions to insert this record', 1; 
	END;
END
GO

/* Decrypt function requires nvachar for asym key */
CREATE PROCEDURE SP_SEL_BANGDIEM(@MAHP AS VARCHAR(20)
								,@MANV AS VARCHAR(20)
								,@MK AS NVARCHAR(MAX))
AS
BEGIN
	DECLARE @DIEM_ENCRYPT VARBINARY(MAX)
	DECLARE @ASYMKEY VARCHAR(20)

	SET @ASYMKEY = (
		SELECT NV.PUBKEY
		FROM NHANVIEN AS NV
			JOIN LOP AS LP
			ON LP.MANV = NV.MANV
			JOIN HOCPHAN AS HP
			ON HP.MALOP = LP.MALOP
		WHERE NV.MANV = @MANV AND HP.MAHP = @MAHP
	);
	
	IF @ASYMKEY IS NOT NULL
	BEGIN
		SELECT MASV, MAHP, CONVERT(VARCHAR(MAX), DECRYPTBYASYMKEY(ASYMKEY_ID(@ASYMKEY), DIEMTHI, @MK)) AS DIEMTHI
		FROM BANGDIEM
		WHERE BANGDIEM.MAHP = @MAHP
	END
	ELSE
	BEGIN
		SELECT MASV, MAHP, DIEMTHI
		FROM BANGDIEM
		WHERE BANGDIEM.MAHP = @MAHP
	END
END
GO

--EXEC SP_SEL_BANGDIEM 'MMT', 'NV01', '1234'
--GO

DROP PROCEDURE SP_INS_SINHVIEN
DROP PROCEDURE SP_INS_PUBLIC_NHANVIEN
DROP PROCEDURE SP_SEL_PUBLIC_NHANVIEN
DROP PROCEDURE SP_INS_BANGDIEM
DROP PROCEDURE SP_SEL_BANGDIEM

/* Remember to remove old keys */
DROP ASYMMETRIC KEY NV01
DROP ASYMMETRIC KEY NV02
DROP ASYMMETRIC KEY NV03

